# Snowflake CLI Project Configuration
# Following Snowflake GitOps best practices with native resource management

definition_version: 1.1

# Global project variables
variables:
  database_name: "RETAILWORKS_DB"
  schema_suffix: ""
  warehouse: "RETAILWORKS_WH"

# Environment-specific configurations
environments:
  dev:
    variables:
      database_name: "RETAILWORKS_DB_DEV"
      schema_suffix: "_DEV"
      warehouse: "RETAILWORKS_DEV_WH"
  
  test:
    variables:
      database_name: "RETAILWORKS_DB_TEST"
      schema_suffix: "_TEST"
      warehouse: "RETAILWORKS_TEST_WH"
  
  prod:
    variables:
      database_name: "RETAILWORKS_DB"
      schema_suffix: ""
      warehouse: "RETAILWORKS_PROD_WH"

# Native Snowflake objects managed by CLI
objects:
  # Database management
  - type: database
    name: "<% ctx.env.database_name %>"
    comment: "RetailWorks Enterprise Data Platform - Main Database"

  # Schema management
  - type: schema
    name: "SALES_SCHEMA<% ctx.env.schema_suffix %>"
    database: "<% ctx.env.database_name %>"
    comment: "Sales data including orders, territories, and representatives"

  - type: schema
    name: "PRODUCTS_SCHEMA<% ctx.env.schema_suffix %>"
    database: "<% ctx.env.database_name %>"
    comment: "Product catalog, categories, suppliers, and inventory"

  - type: schema
    name: "CUSTOMERS_SCHEMA<% ctx.env.schema_suffix %>"
    database: "<% ctx.env.database_name %>"
    comment: "Customer information, addresses, and segmentation"

  - type: schema
    name: "HR_SCHEMA<% ctx.env.schema_suffix %>"
    database: "<% ctx.env.database_name %>"
    comment: "Human resources data including employees, departments, and payroll"

  - type: schema
    name: "ANALYTICS_SCHEMA<% ctx.env.schema_suffix %>"
    database: "<% ctx.env.database_name %>"
    comment: "Data warehouse dimensional model for analytics"

  - type: schema
    name: "STAGING_SCHEMA<% ctx.env.schema_suffix %>"
    database: "<% ctx.env.database_name %>"
    comment: "Staging area for data loading and ETL processes"

  # Warehouse management
  - type: warehouse
    name: "<% ctx.env.warehouse %>"
    warehouse_size: "XSMALL"
    auto_suspend: 300
    auto_resume: true
    comment: "Data warehouse for RetailWorks analytics"

  # Stage management
  - type: stage
    name: "RETAILWORKS_STAGE"
    database: "<% ctx.env.database_name %>"
    schema: "STAGING_SCHEMA<% ctx.env.schema_suffix %>"
    comment: "Main stage for data loading operations"

# SQL script deployment configuration
sql:
  # Schema deployment order
  schemas:
    - file: "ddl/schemas/01_create_database.sql"
      
  # Table deployment order  
  tables:
    - file: "ddl/tables/staging_schema_tables.sql"
      depends_on: ["schemas"]
      
    - file: "ddl/tables/sales_schema_tables.sql"
      depends_on: ["schemas"]
      
    - file: "ddl/tables/products_schema_tables.sql"
      depends_on: ["schemas"]
      
    - file: "ddl/tables/customers_schema_tables.sql"
      depends_on: ["schemas"]
      
    - file: "ddl/tables/hr_schema_tables.sql"
      depends_on: ["schemas"]
      
    - file: "ddl/tables/analytics_schema_tables.sql"
      depends_on: ["schemas", "tables"]
      
  # Views and procedures deployment
  views:
    - file: "ddl/views/sales_analytics_views.sql"
      depends_on: ["tables"]
      
    - file: "ddl/procedures/business_logic_procedures.sql"
      depends_on: ["tables"]

# Snowpark applications configuration
snowpark:
  project_name: "RetailWorks"
  stage_name: "RETAILWORKS_STAGE"
  src: "snowpark/src"
  
  functions:
    - name: "etl_pipeline"
      handler: "etl_pipeline.main"
      signature: 
        - name: "table_name"
          type: "string"
        - name: "environment"
          type: "string"
      returns: "string"
      
    - name: "customer_ltv_prediction"
      handler: "ml_models.predict_customer_ltv"
      signature:
        - name: "customer_id"
          type: "number"
      returns: "number"

# Streamlit applications configuration  
streamlit:
  name: "retailworks_streamlit"
  main_file: "streamlit/dashboards/executive_dashboard.py"
  stage: "@RETAILWORKS_STAGE/streamlit"

# Git integration for infrastructure as code
git:
  auto_push: true
  auto_commit: false
  commit_message_template: "chore: update Snowflake objects via CLI"

# Deployment configuration
deployment:
  # Enable safe deployments with CREATE OR ALTER
  safe_mode: true
  
  # Validate before deployment
  validate_before_deploy: true
  
  # Rollback configuration
  enable_rollback: true
  
  # Drift detection
  detect_drift: true